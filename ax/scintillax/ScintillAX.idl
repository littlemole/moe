#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

////////////////////////////////////////////////////////////////////////////////////////
// Scintilla AX library
////////////////////////////////////////////////////////////////////////////////////////

[
  uuid(B353B863-12C3-45ab-82FE-2F8F9BAA91D6),
  version(1.0),
  helpstring("ScintillAx")
]
library Scintilla
{

	enum SCINTILLA_SYSTYPE {
		SCINTILLA_SYSTYPE_UNIX  = 0,
		SCINTILLA_SYSTYPE_WIN32 = 1
	};

	enum SCINTILLA_ENCODING {
		SCINTILLA_ENCODING_ANSI  = 0,
		SCINTILLA_ENCODING_UTF8  = 1,
		SCINTILLA_ENCODING_UTF16 = 2
	};

	enum SCINTILLA_SYNTAX {
		SCINTILLA_SYNTAX_PLAIN  = 0,
		SCINTILLA_SYNTAX_HTML   = 1,
		SCINTILLA_SYNTAX_CSS    = 2,
		SCINTILLA_SYNTAX_VB     = 3,
		SCINTILLA_SYNTAX_JS     = 4,
		SCINTILLA_SYNTAX_SQL    = 5,
		SCINTILLA_SYNTAX_SHELL  = 6,
		SCINTILLA_SYNTAX_PERL   = 7,
		SCINTILLA_SYNTAX_CPP    = 8,
		SCINTILLA_SYNTAX_JAVA   = 9,
		SCINTILLA_SYNTAX_CSHARP = 10
	};

////////////////////////////////////////////////////////////////////////////////////////
// Interfaces
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
	////////////////////////////////////////////////////////////////////////////////////
	importlib("stdole32.tlb");

	////////////////////////////////////////////////////////////////////////////////////
	// IScintillAx
	////////////////////////////////////////////////////////////////////////////////////
	[
      uuid(1120EC6A-130F-440e-9B1D-F02D505FB5BC),
      helpstring("ScintillAX Interface - Text Editor AX Component"),
      object,oleautomation, dual
    ]
	interface IScintillAx : IDispatch
    {
		//properties:

		[ 
		  propputref,bindable, requestedit,id(DISPID_FONT), 
		  helpstring("Get/Set Font")
		]
		HRESULT Font( [in] IFontDisp* fnt);
		[ 
		  propput,bindable, requestedit,id(DISPID_FONT)
		]
		HRESULT Font( [in] IFontDisp* fnt);

		[ 
		  propget,bindable, requestedit,id(DISPID_FONT)
		]
		HRESULT Font( [out,retval] IFontDisp** fnt);

		[ 
		  propput,bindable,displaybind,defaultbind,requestedit,id(1), 
		  helpstring("Get/Set Filename")
		]
		HRESULT Filename( [in] BSTR fname);
		[ 
		  propget,bindable,displaybind, requestedit,id(1)
		]
		HRESULT Filename( [out,retval] BSTR* fname);


		[ 
		  propput,bindable,displaybind, requestedit,id(2), 
		  helpstring("Set/Get ReadOnly Mode")
		]
		HRESULT ReadOnly( [in] VARIANT_BOOL vbReadOnly);
		[ 
		  propget,bindable,displaybind, requestedit,id(2)
		]
		HRESULT ReadOnly( [out,retval] VARIANT_BOOL* vbReadOnly);


		[ 
		  propput,bindable,displaybind, requestedit,id(3), 
		  helpstring("Get/Set Coloring Syntax")
		]
		HRESULT Syntax( [in] long typ);
		[ 
		  propget,bindable,displaybind, requestedit,id(3)
		]
		HRESULT Syntax( [out,retval] long* typ);


		[ 
		  propput,bindable,displaybind, requestedit,id(4), 
		  helpstring("get/Set SysTypec (UNIX/Win32)")
		]
		HRESULT SysType( [in] long typ);
		[ 
		  propget,bindable,displaybind, requestedit,id(4)
		]
		HRESULT SysType( [out,retval] long* typ);


		[ 
		  propput,bindable,displaybind, requestedit,id(5), 
		  helpstring("Set/Get Encoding (UTF-8,Ansi,...)")
		]
		HRESULT Encoding( [in] long typ);
		[ 
		  propget,bindable,displaybind, requestedit,id(5)
		]
		HRESULT Encoding( [out,retval] long* typ);


		[ 
		  propput,bindable,displaybind, requestedit,id(6), 
		  helpstring("Set/Get Usage of Tabulator chars, setting to false converts tabs to spaces")
		]
		HRESULT TabUsage( [in] VARIANT_BOOL vbTabUsage);
		[ 
		  propget,bindable,displaybind, requestedit,id(6)
		]
		HRESULT TabUsage( [out,retval] VARIANT_BOOL* vbTabUsage);


		[ 
		  propput,bindable,displaybind, requestedit,id(7), 
		  helpstring("Set/Get whether Tabulator indents")
		]
		HRESULT TabIndents( [in] VARIANT_BOOL vbTabIndents);
		[ 
		  propget,bindable,displaybind, requestedit,id(7)
		]
		HRESULT TabIndents( [out,retval] VARIANT_BOOL* vbTabIndents);


		[ 
		  propput,bindable,displaybind, requestedit,id(8), 
		  helpstring("Get/Set whether BackSpace unindents")
		]
		HRESULT BackSpaceUnindents( [in] VARIANT_BOOL vbBackSpaceIndents);
		[ 
		  propget,bindable,displaybind, requestedit,id(8)
		]
		HRESULT BackSpaceUnindents( [out,retval] VARIANT_BOOL* vbBackSpaceIndents);


		[ 
		  propput,bindable,displaybind, requestedit,id(9), 
		  helpstring("get/Set Tabulator width")
		]
		HRESULT TabWidth( [in] long width);
		[ 
		  propget,bindable,displaybind, requestedit,id(9)
		]
		HRESULT TabWidth( [out,retval] long* w);


		[ 
		  propput,bindable,displaybind, requestedit,id(10), 
		  helpstring("GetSet Overtype mode")
		]
		HRESULT Overtype( [in] VARIANT_BOOL over_type);
		[ 
		  propget,bindable,displaybind, requestedit,id(10)
		]
		HRESULT Overtype( [out,retval] VARIANT_BOOL* over_type);


		[ 
		  propput,bindable,displaybind, requestedit,id(11), 
		  helpstring("Get/Set Use Context Menue")
		]
		HRESULT UseContext([in] VARIANT_BOOL useMenu);
		[ 
		  propget,bindable,displaybind, requestedit,id(11)
		]
		HRESULT UseContext([out,retval] VARIANT_BOOL* useMenu);


	//methods:

		// Load / Save
		[id(12), helpstring("Load File form disk")] 
		HRESULT Load( [in] BSTR fname );

		[id(13), helpstring("Load File from disk - Force UTF8")] 
		HRESULT LoadUTF8( [in] BSTR fname);

		[id(14), helpstring("Save File to disk")] 
		HRESULT Save();

		[id(15), helpstring("Save As - save File to disk to path")] 
		HRESULT SaveAs( [in] BSTR fname );


		// Text Manipulation

		[ id(16), helpstring("Set whole document Text")	]
		HRESULT SetText( [in] BSTR txt);

		[ id(17), helpstring("Get whole document Text")	]
		HRESULT GetText( [out,retval] BSTR* txt);

		[ id(18), helpstring("returns whole document's Text Length")]
		HRESULT TextLength( [out,retval] long* len );

		[id(19), helpstring("Append Text to document")] 
		HRESULT Append( [in] BSTR txt);

		[id(20), helpstring("Insert Text to document at specific position")] 
		HRESULT Insert( [in] Bstr txt, [in] long p );

		[ id(21), helpstring("Get Modified flag")	]
		HRESULT Modified( [out,retval] VARIANT_BOOL* vbModified );


		// Position and Caret
		[ id(22), helpstring("Set Caret Position")	]
		HRESULT SetCaretPos( [in] long p);

		[ id(23), helpstring("Get Caret Position")	]
		HRESULT GetCaretPos( [out,retval] long* p);

		[ id(24), helpstring("Character At")] 
		HRESULT CharAt( [in]long p, [out,retval] BSTR* ch);

		[ id(25), helpstring("Scroll by cols / lines")] 
		HRESULT Scroll([in] long cCols, [in] long cLines);

		[ id(26), helpstring("Scroll into View")] 
		HRESULT ScrollIntoView();

		[ id(27), helpstring("Set current Search Position")]
		HRESULT SetSearchPos( [in] long p);

		[ id(28),  helpstring("Get current SearchPosition")	]
		HRESULT GetSearchPos( [out,retval] long* p);

		[ id(29), helpstring("Set Anchor Position")]
		HRESULT SetAnchorPos( [in] long p);

		[ id(30),  helpstring("Get Anchor Position")	]
		HRESULT GetAnchorPos( [out,retval] long* p);


		// Line Handling
		[ id(31), helpstring("Get Line Count")]
		HRESULT LineCount( [out,retval] long* cnt);

		[ id(32), helpstring("Current line")] 
		HRESULT CurrentLine( [out,retval] long* l);

		[ id(33), helpstring("Line from position")] 
		HRESULT LineFromPos( [in] long p, [out,retval] long* l );

		[ id(34), helpstring("pos for line")] 
		HRESULT PosFromLine( [in] long l, [out,retval] long* p );

		[ id(35), helpstring("endpos for line")] 
		HRESULT LineEndPos( [in] long l, [out,retval] long* p );

		[ id(36), helpstring("First Visible Line")	]
		HRESULT FirstVisibleLine( [out,retval] long* l);

		[ id(37), helpstring("Visible Lines Count")	]
		HRESULT LinesOnScreen( [out,retval] long* cnt);

		[ id(38), helpstring("Line Length")] 
		HRESULT LineLength( [in] long l, [out,retval] long* len);

		[ id(39), helpstring("Get Line Text")] 
		HRESULT LineText( [in] long l, [out,retval] BSTR* txt );

		[ id(40), helpstring("Set Line Text")] 
		HRESULT SetLineText( [in] long l, [in] BSTR txt );

		[ id(41), helpstring("Line")] 
		HRESULT GotoLine( [in] long l );


		// Selection
		[ id(42), helpstring("Get current selection")] 
		HRESULT GetSelection ( [out] long* pFirst, [out] long* pLast );

		[ id(43), helpstring("Set current selection")] 
		HRESULT SetSelection ( [in] long pFirst, [in] long pLast );

		[ id(44), helpstring("Get current selection Text")] 
		HRESULT GetSelectionText( [out,retval] BSTR* txt );

		[ id(45), helpstring("Set Selection Start")]
		HRESULT SetSelectionStart( [in] long p);

		[ id(46), helpstring("Get Selection Start")]
		HRESULT GetSelectionStart( [out,retval] long* p);

		[ id(47), helpstring("Set Selection End")	]
		HRESULT SetSelectionEnd( [in] long p);

		[ id(48), helpstring("Get Selection End")	]
		HRESULT GetSelectionEnd( [out,retval] long* p);

		[ id(49), helpstring("Replace current selection")] 
		HRESULT ReplaceSelection( [in] BSTR txt );

		// Search and Replace
		[ id(50), helpstring("Search in page")] 
		HRESULT Search( [in] BSTR sWhat, [in] long lFlags, [out,retval] VARIANT_BOOL* vbFound);

		[ id(51), helpstring("Replace in page")] 
		HRESULT Replace( [in] BSTR sWhat, [in] BSTR w, [in] long lFlags, [out,retval] VARIANT_BOOL* vbReplaced);


		// Undo / Redo
		[ id(52), helpstring("Undo")] 
		HRESULT Undo();

		[ id(53), helpstring("Redo")] 
		HRESULT Redo();

		[ id(54), helpstring("Set SavePoint")] 
		HRESULT SavePoint();


		// Clipboard
		[ id(55), helpstring("Cut current selection")] 
		HRESULT Cut();

		[ id(56), helpstring("Copy current selection")] 
		HRESULT Copy();

		[ id(57), helpstring("Paste current selection")] 
		HRESULT Paste();


		// Options

		[ id(58), helpstring("Set Focus")] 
		HRESULT SetFocus();

		[ id(59), helpstring("Zoom in")] 
		HRESULT ZoomIn();

		[ id(60), helpstring("Zoom out")] 
		HRESULT ZoomOut();

		[ id(61), helpstring("Set Indent")] 
		HRESULT SetIndent([in] long i);

		[ id(62), helpstring("Convert Tabs")] 
		HRESULT ConvertTabs();


		// Print
		[ id(63), helpstring("Print")] 
		HRESULT Print();

		[ id(64), helpstring("Get Text Range")] 
		HRESULT GetTextRange([in] long pStart, [in] long pEnd, [out,retval] BSTR* rng);

		[ id(65), helpstring("Show Properties")] 
		HRESULT Properties();

		[ id(66), helpstring("Syntax")] 
		HRESULT SyntaxDisplayName([out,retval] BSTR* syntax);

		[ id(67), helpstring("SyntaxDisplayName")] 
		HRESULT GetSyntaxDisplayName([in] long type, [out,retval] BSTR* syntax);

		/////////////////////////////////////////////////////////////////////

		[id(68), helpstring("Show the Insert Color Dialog")]
		HRESULT InsertColorDialog( HWND wnd );

		/////////////////////////////////////////////////////////////////////

		[ 
		  propput,bindable,displaybind, requestedit,id(69), 
		  helpstring("Set WriteBOM")
		]
		HRESULT WriteBOM( [in] VARIANT_BOOL vb);
		[ 
		  propget,bindable,displaybind, requestedit,id(69), 
		  helpstring("Get WriteBOM")
		]
		HRESULT WriteBOM( [out,retval] VARIANT_BOOL* vb);



		[ 
		  propput,bindable,displaybind, requestedit,id(70), 
		  helpstring("Get/Set Show LineNumbers")
		]
		HRESULT ShowLineNumbers([in] VARIANT_BOOL useLineNums);
		[ 
		  propget,bindable,displaybind, requestedit,id(70)
		]
		HRESULT ShowLineNumbers([out,retval] VARIANT_BOOL* useLineNums);


		[ 
		  id(71), 
		  helpstring("SetAnnotation Text")
		]
		HRESULT SetAnnotation([in] long line, [in] BSTR txt);

		[ 
		  id(72), 
		  helpstring("ClearAnnotation Text")
		]
		HRESULT ClearAnnotation([in] long line);

		[ 
		  id(73), 
		  helpstring("ClearAnnotations")
		]
		HRESULT ClearAnnotations();

		[ 
		  id(74), 
		  helpstring("SetAnnotation Style")
		]
		HRESULT SetAnnotationStyle([in] long line, [in] long style);

    };



////////////////////////////////////////////////////////////////////////////////////////
// Event Disp Interfaces
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
	// _IScintillAXEvents
	////////////////////////////////////////////////////////////////////////////////////

	[
	  uuid(2D33B016-176A-40fe-B665-B114A6511AC8),
	  helpstring("ScintillAX Event Source Interface")
	]
	dispinterface _IScintillAxEvents
	{
		properties:
		methods:

		[id(1), helpstring("Name changed")]  
		void OnFileNameChanged([in] BSTR fname, [in] BSTR fPath);

		[id(2), helpstring("Show Menue")]  
		void OnShowMenu([out] VARIANT_BOOL* vbShowMenue);

		[id(3), helpstring("Pos change")]  
		void OnPosChange([in] long iLine );

		[id(4), helpstring("Char entered")]  
		void OnChar([in] BSTR ch );

	};

////////////////////////////////////////////////////////////////////////////////////////
// Event Dual Interfaces
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
	// IScintillAXEvents (dual version)
	////////////////////////////////////////////////////////////////////////////////////

    [
      uuid(E3766918-A0A4-48b7-942A-BA4B4D524CD0),
      helpstring("dual events for ScintillAX"),
      object,oleautomation, dual
    ]
    interface IScintillAxEvents : IDispatch
    {
		[id(1), helpstring("Name changed")]  
		HRESULT OnFileNameChanged([in] BSTR fname, [in] BSTR fPath);

		[id(2), helpstring("Show Menue")]  
		HRESULT OnShowMenu([out] VARIANT_BOOL* vbShowMenue);

		[id(3), helpstring("Pos change")]  
		HRESULT OnPosChange([in] long iLine );

		[id(4), helpstring("Char entered")]  
		HRESULT OnChar([in] BSTR ch );

		[id(5), helpstring("Syntax changed")]  
		HRESULT OnSyntax([in] long s );

		[id(6), helpstring("System change")]  
		HRESULT OnSystem([in] long s );

		[id(7), helpstring("Encoding changed")]  
		HRESULT OnEncoding([in] long e );
	};


////////////////////////////////////////////////////////////////////////////////////////
// Co Classes ( class factories )
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
	// ScintillAx
	////////////////////////////////////////////////////////////////////////////////////

	[
		uuid(9B5488B0-33FB-44df-8D58-672A1C1E08C1),
		aggregatable
	]
	coclass ScintillAx
	{
		[default]         interface     IScintillAx;
		[default, source] dispinterface _IScintillAxEvents;
	}

	[
		uuid(C16CD143-5126-414a-AFDE-406F31E95D13),
		helpstring("IScintillAx Property Page")
	]
	coclass ScintillAxProperties
	{
		[default] interface IUnknown;
	};
}