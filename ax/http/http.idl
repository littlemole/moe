import "oaidl.idl";

////////////////////////////////////////////////////////////////////////////////////////
// mol HTTP COM Lib
////////////////////////////////////////////////////////////////////////////////////////

[
  uuid(CDCBD74D-E200-41E1-BDA5-9537127F6F37),
  version(1.0),
  helpstring("mol HTTP lib - http library for Scripting clients")
]
library HTTP
{
	/*
	enum IO_SYSTYPE {
		IO_SYSTYPE_UNIX  = 0,
		IO_SYSTYPE_WIN32 = 1
	};
	*/

////////////////////////////////////////////////////////////////////////////////////////
// Interfaces
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
	////////////////////////////////////////////////////////////////////////////////////
	importlib("stdole32.tlb");

	interface IHttp;
	interface IHttpHeaders;
	interface IHttpRequest;
	interface IHttpResponse;
	interface IHttpBody;

	////////////////////////////////////////////////////////////////////////////////////
	// IHttp
	////////////////////////////////////////////////////////////////////////////////////
	[
	  uuid(65ECE645-63A0-422B-9551-30BABE5C0D46),
      helpstring("IHttp - interface for HTTP communication"),
      object,oleautomation, dual
    ]
	interface IHttp : IDispatch
    {
		[id(DISPID_VALUE), helpstring("Get shortcut")] 
		HRESULT Get([in] BSTR url, [out,retval] IHttpRequest** request);

		[id(1), helpstring("Create Request")] 
		HRESULT Request([in] BSTR cmd, [out,retval] IHttpRequest** request);
	}

	////////////////////////////////////////////////////////////////////////////////////
	// IHttpHeader
	////////////////////////////////////////////////////////////////////////////////////
	[
	  uuid(0770FB34-58D4-4417-B47E-B07D2CA604B9),
      helpstring("IHttpHeader - header obj"),
      object,oleautomation, dual
    ]
	interface IHttpHeader : IDispatch
    {
		[ id(1), propput, helpstring("HTTP header name") ] 
		HRESULT Name([in] BSTR m);
		[ id(1), propget ] 
		HRESULT Name([out,retval] BSTR* m);

		[ id(DISPID_VALUE), propput, helpstring("HTTP header value") ] 
		HRESULT Value([in] BSTR m);
		[ id(DISPID_VALUE), propget ] 
		HRESULT Value([out,retval] BSTR* m);
	}


	////////////////////////////////////////////////////////////////////////////////////
	// IHttpHeaders
	////////////////////////////////////////////////////////////////////////////////////
	[
	  uuid(E4371FB6-0126-41D1-8E37-B71715C07104),
      helpstring("IHttpHeaders - headers collection obj"),
      object,oleautomation, dual
    ]
	interface IHttpHeaders : IDispatch
    {

		[id(DISPID_NEWENUM), helpstring("New Enum - scripting language enumaration support")] 
		HRESULT _NewEnum([out,retval] IEnumVARIANT** newEnum);

		[id(DISPID_VALUE), helpstring("Item - header for index")] 
		HRESULT Item([in] VARIANT i, [out,retval] VARIANT* header);

		[id(1), helpstring("Count - returns number of headers")] 
		HRESULT Count([out,retval] long* cnt);

		[id(2), helpstring("Add header")] 
		HRESULT Add([in] BSTR name, [in]BSTR value);

	}


	////////////////////////////////////////////////////////////////////////////////////
	// IHttpRequest
	////////////////////////////////////////////////////////////////////////////////////
	[
	  uuid(1800C704-0169-4C4A-96BC-EABEB2DD4606),
      helpstring("IHttpRequest - request obj"),
      object,oleautomation, dual
    ]
	interface IHttpRequest : IDispatch
    {
		[ id(1), propput, helpstring("attach result callback") ] 
		HRESULT onResult([in] IDispatch* cb);

		[ id(2), propput, helpstring("attach error callback") ] 
		HRESULT onError([in] IDispatch* cb);

		[ id(3), propput, helpstring("the url to connect to") ] 
		HRESULT Url([in] BSTR m);
		[ id(3), propget ] 
		HRESULT Url([out,retval] BSTR* m);

		[ id(4), propput, helpstring("HTTP Method (GET, POST, ...)") ] 
		HRESULT Method([in] BSTR m);
		[ id(4), propget ] 
		HRESULT Method([out,retval] BSTR* m);

		[ id(5), propput, helpstring("HTTP protocol version") ] 
		HRESULT Version([in] BSTR m);
		[ id(5), propget ] 
		HRESULT Version([out,retval] BSTR* m);

		[ id(6), propput, helpstring("HTTP Headers") ] 
		HRESULT Headers([in] IHttpHeaders* h);
		[ id(6), propget ] 
		HRESULT Headers([out,retval] IHttpHeaders** h);

		[ id(7), propput, helpstring("HTTP Body as String") ] 
		HRESULT Body([in] BSTR b);
		[ id(7), propget ] 
		HRESULT Body([out,retval] BSTR* b);

		[ id(8), helpstring("execute request") ] 
		HRESULT Execute();

	}

	////////////////////////////////////////////////////////////////////////////////////
	// IHttpResponse
	////////////////////////////////////////////////////////////////////////////////////
	[
	  uuid(39171BA0-B240-428A-87A6-6C2DC925A2B4),
      helpstring("IHttpResponse - HTTP Response interface"),
      object,oleautomation, dual
    ]
	interface IHttpResponse : IDispatch
    {
		// properties

		/////////////////////////////////////////////////////////////////////
		[ propget,id(1),helpstring("HTTP status code") ]
		HRESULT Status( [out,retval] LONG* s);
		[ propput,id(1) ]
		HRESULT Status( [in] LONG s);

		[ propget,id(2),helpstring("HTTP body") ]
		HRESULT Body( [out,retval] BSTR* s);
		[ propput,id(2) ]
		HRESULT Body( [in] BSTR b);

		[ propget,id(3),helpstring("HTTP response size") ]
		HRESULT Size( [out,retval] long* s);
		[ propput,id(3) ]
		HRESULT Size( [in] long b);

		[ id(4), propput, helpstring("HTTP Headers") ] 
		HRESULT Headers([in] IHttpHeaders* h);
		[ id(4), propget ] 
		HRESULT Headers([out,retval] IHttpHeaders** h);

    };


////////////////////////////////////////////////////////////////////////////////////////
// Co Classes ( class factories )
////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////
	// HTTP
	////////////////////////////////////////////////////////////////////////////////////

	[
		uuid(E39732D8-7B64-4DC3-9924-9F216345F07A)
	]
	coclass HTTP
	{
		[default]         interface     IHttp;
	}

}