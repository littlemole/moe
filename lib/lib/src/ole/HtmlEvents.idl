import "oaidl.idl";
import "ocidl.idl";

[
  uuid(174AA28E-3858-4e75-AFE4-20D19BFC815D),
  version(1.0),
  helpstring("mol html event helper dual interface")
]
library MOL_HtmlEventsLibrary
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    [
      uuid(F010AA89-5CF5-4bce-BABE-5ADAE3D300EB),
      helpstring("Event interface for DWebBrowserEvents2 dual"),
      object,oleautomation, dual
    ]
    interface IWebBrowserEvents : IDispatch
    {
            [id(0x00000066), helpstring("Statusbar text changed.")]
            HRESULT StatusTextChange([in] BSTR Text);
            [id(0x0000006c), helpstring("Fired when download progress is updated.")]
            HRESULT ProgressChange(
                            [in] long Progress, 
                            [in] long ProgressMax);
            [id(0x00000069), helpstring("The enabled state of a command changed.")]
            HRESULT CommandStateChange(
                            [in] long Command, 
                            [in] VARIANT_BOOL Enable);
            [id(0x0000006a), helpstring("Download of a page started.")]
            HRESULT DownloadBegin();
            [id(0x00000068), helpstring("Download of page complete.")]
            HRESULT DownloadComplete();
            [id(0x00000071), helpstring("Document title changed.")]
            HRESULT TitleChange([in] BSTR Text);
            [id(0x00000070), helpstring("Fired when the PutProperty method has been called.")]
            HRESULT PropertyChange([in] BSTR szProperty);
            [id(0x000000fa), helpstring("Fired before navigate occurs in the given WebBrowser (window or frameset element). The processing of this navigation may be modified.")]
            HRESULT BeforeNavigate2(
                            [in] IDispatch* pDisp, 
                            [in] VARIANT* URL, 
                            [in] VARIANT* Flags, 
                            [in] VARIANT* TargetFrameName, 
                            [in] VARIANT* PostData, 
                            [in] VARIANT* Headers, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000000fb), helpstring("A new, hidden, non-navigated WebBrowser window is needed.")]
            HRESULT NewWindow2(
                            [in, out] IDispatch** ppDisp, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000000fc), helpstring("Fired when the document being navigated to becomes visible and enters the navigation stack.")]
            HRESULT NavigateComplete2(
                            [in] IDispatch* pDisp, 
                            [in] VARIANT* URL);
            [id(0x00000103), helpstring("Fired when the document being navigated to reaches ReadyState_Complete.")]
            HRESULT DocumentComplete(
                            [in] IDispatch* pDisp, 
                            [in] VARIANT* URL);
            [id(0x000000fd), helpstring("Fired when application is quiting.")]
            HRESULT OnQuit();
            [id(0x000000fe), helpstring("Fired when the window should be shown/hidden")]
            HRESULT OnVisible([in] VARIANT_BOOL Visible);
            [id(0x000000ff), helpstring("Fired when the toolbar  should be shown/hidden")]
            HRESULT OnToolBar([in] VARIANT_BOOL ToolBar);
            [id(0x00000100), helpstring("Fired when the menubar should be shown/hidden")]
            HRESULT OnMenuBar([in] VARIANT_BOOL MenuBar);
            [id(0x00000101), helpstring("Fired when the statusbar should be shown/hidden")]
            HRESULT OnStatusBar([in] VARIANT_BOOL StatusBar);
            [id(0x00000102), helpstring("Fired when fullscreen mode should be on/off")]
            HRESULT OnFullScreen([in] VARIANT_BOOL FullScreen);
            [id(0x00000104), helpstring("Fired when theater mode should be on/off")]
            HRESULT OnTheaterMode([in] VARIANT_BOOL TheaterMode);
            [id(0x00000106), helpstring("Fired when the host window should allow/disallow resizing")]
            HRESULT WindowSetResizable([in] VARIANT_BOOL Resizable);
            [id(0x00000108), helpstring("Fired when the host window should change its Left coordinate")]
            HRESULT WindowSetLeft([in] long Left);
            [id(0x00000109), helpstring("Fired when the host window should change its Top coordinate")]
            HRESULT WindowSetTop([in] long Top);
            [id(0x0000010a), helpstring("Fired when the host window should change its width")]
            HRESULT WindowSetWidth([in] long Width);
            [id(0x0000010b), helpstring("Fired when the host window should change its height")]
            HRESULT WindowSetHeight([in] long Height);
            [id(0x00000107), helpstring("Fired when the WebBrowser is about to be closed by script")]
            HRESULT WindowClosing(
                            [in] VARIANT_BOOL IsChildWindow, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000010c), helpstring("Fired to request client sizes be converted to host window sizes")]
            HRESULT ClientToHostWindow(
                            [in, out] long* CX, 
                            [in, out] long* CY);
            [id(0x0000010d), helpstring("Fired to indicate the security level of the current web page contents")]
            HRESULT SetSecureLockIcon([in] long SecureLockIcon);
            [id(0x0000010e), helpstring("Fired to indicate the File Download dialog is opening")]
            HRESULT FileDownload([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000010f), helpstring("Fired when a binding error occurs (window or frameset element).")]
            HRESULT NavigateError(
                            [in] IDispatch* pDisp, 
                            [in] VARIANT* URL, 
                            [in] VARIANT* Frame, 
                            [in] VARIANT* StatusCode, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000000e1), helpstring("Fired when a print template is instantiated.")]
            HRESULT PrintTemplateInstantiation([in] IDispatch* pDisp);
            [id(0x000000e2), helpstring("Fired when a print template destroyed.")]
            HRESULT PrintTemplateTeardown([in] IDispatch* pDisp);
            [id(0x000000e3), helpstring("Fired when a page is spooled. When it is fired can be changed by a custom template.")]
            HRESULT UpdatePageStatus(
                            [in] IDispatch* pDisp, 
                            [in] VARIANT* nPage, 
                            [in] VARIANT* fDone);
            [id(0x00000110), helpstring("Fired when the global privacy impacted state changes")]
            HRESULT PrivacyImpactedStateChange([in] VARIANT_BOOL bImpacted);
    };
}