#include "win/mem.h"

namespace mol {

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

global::global()
{
    hGlobal_ = 0;
}

/////////////////////////////////////////////////////////////////////

global::global( HGLOBAL glob )
{
	hGlobal_ = glob;
}

/////////////////////////////////////////////////////////////////////

global::global( const mol::string& s, int opt )
{
	if ( alloc( (int)((s.size()+1)*sizeof(mol::TCHAR),opt)) )
	{
		mol::TCHAR* tmp = (mol::TCHAR*)lock();
		if ( tmp )
		{
			memcpy(tmp,s.c_str(),(s.size()+1)*sizeof(mol::TCHAR));
			unLock();
		}
	}
}


global::global( void* v, size_t size, int opt )
{
	if ( alloc(size,opt) )
	{
		char* tmp = lock();
		if ( tmp )
		{
			memcpy( tmp, v, size );
			unLock();
		}
	}
}


/////////////////////////////////////////////////////////////////////

global::~global()
{
    release();
}

/////////////////////////////////////////////////////////////////////

BOOL global::alloc( size_t size, int opt )
{
    return (hGlobal_ = ::GlobalAlloc( opt, size )) != 0;
}

/////////////////////////////////////////////////////////////////////

char* global::lock()
{
    return (char*)(::GlobalLock( hGlobal_ ));
}

/////////////////////////////////////////////////////////////////////

void global::unLock()
{
    ::GlobalUnlock( hGlobal_);
}

/////////////////////////////////////////////////////////////////////

void global::release()
{
	if ( hGlobal_ )
		::GlobalFree(hGlobal_);
    hGlobal_ = 0;
}

/////////////////////////////////////////////////////////////////////

void global::attach(HGLOBAL glob)
{
	release();
	hGlobal_ = glob;
}

/////////////////////////////////////////////////////////////////////

void global::detach()
{
	hGlobal_ = 0;
}

} // endnamespace mol